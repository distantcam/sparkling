{"meta":{"title":"Cam's Blog","subtitle":null,"description":null,"author":"Cameron MacFarland","url":"http://cam.macfar.land"},"pages":[{"title":"About Cam","date":"2018-05-23T03:56:56.736Z","updated":"2018-05-23T03:56:56.736Z","comments":true,"path":"about/index.html","permalink":"http://cam.macfar.land/about/index.html","excerpt":"","text":"Hi, I’m Cameron. I’m a software engineer, gamer, and very occasional blogger. Currently I live in Perth, Australia.Primarily I program in .NET. My programming interests include WPF, Roslyn, and Reactive Extensions.Feel free to contact me via twitter, or in the comments below."},{"title":"Categories","date":"2018-05-23T03:58:22.949Z","updated":"2018-05-23T03:58:22.949Z","comments":false,"path":"categories/index.html","permalink":"http://cam.macfar.land/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-12-06T07:47:46.733Z","updated":"2018-05-23T13:35:35.568Z","comments":false,"path":"tags/index.html","permalink":"http://cam.macfar.land/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Blog Update 2018","slug":"Blog-Update-2018","date":"2018-05-23T08:33:03.000Z","updated":"2019-02-18T03:29:47.596Z","comments":true,"path":"Blog-Update-2018/","link":"","permalink":"http://cam.macfar.land/Blog-Update-2018/","excerpt":"My wife keeps pointing out that every time I feel like writing a blog post I spend so much time updating the blog code itself that I never actually write a blogpost.","text":"My wife keeps pointing out that every time I feel like writing a blog post I spend so much time updating the blog code itself that I never actually write a blogpost.They do have a point. I tend to use updating the blog code as an excuse to not write a blog post. So this time I’ve decided to combine them by writing a blog post about the technology and updates used in this blog.Hexohttps://hexo.io/Hexo is a static blog generator written in node.js. Being a node app it’s easy to grab and runs on multiple platforms. It supports templating and has lots of plugins for adding features to your blog.Clean Blog Templatehttps://startbootstrap.com/template-overviews/clean-blog/There is an existing hexo version of the clean blog template, but it didn’t do what I wanted. So instead I converted it myself. Nice clean design with image headers.Unsplashhttps://unsplash.com/Unsplash is a great source of royalty free high quality photos for my blog. It allow hot linking, and doesn’t require attribution, however in my template I do provide attribution where possible. In my template I just have to provide a photo id, and it takes care of the rest. Given the style of blog I wanted, providing high quality images easily and royalty free is wonderful.Gitmenthttps://github.com/imsun/gitmenthttps://github.com/aimingoo/gitmintGitment (&amp; Gitmint) is a comment system that uses github issues to track comments. This is amazing. Given this blog is hosted on github gitment makes sense. I used to use disqus, but I’ve switched completely to gitment now.And that’s it. I want to add more features to this blog, but it’s good enough for now. Hopefully now I’ll write another post sometime within the next 3 years.","categories":[],"tags":[{"name":"life","slug":"life","permalink":"http://cam.macfar.land/tags/life/"}]},{"title":"Akavache and ETags","slug":"akavache-and-etags","date":"2015-07-17T16:00:00.000Z","updated":"2018-05-23T04:48:28.075Z","comments":true,"path":"akavache-and-etags/","link":"","permalink":"http://cam.macfar.land/akavache-and-etags/","excerpt":"Akavache is a cool caching library from the prolific Paul Betts that simplifies caching of data in your application. I wanted to use it with web calls that provided an ETag for caching but Akavache didn’t support this out of the box.","text":"Akavache is a cool caching library from the prolific Paul Betts that simplifies caching of data in your application. I wanted to use it with web calls that provided an ETag for caching but Akavache didn’t support this out of the box.There’s a method in Akavache called GetAndFetchLatest which sounded like what I wanted, but the fetch part was time based, not ETag, as the fetch could be anything not just a web query.So I set out to implement my own version of GetAndFetchLatest that was web specific, and only updated the cache when there was new content from the server. First up I needed a method that would query the server using a given ETag, and return an empty result, or the new content. GetAndFetchLatest has a very nice mechanism where it returns an observable of results. First the cached version is published on the observable, then the fetched version, so you can perform an update as the newer data comes in.The Fetch partFor my method that fetches the data from the server it needed to be aware of the ETag protocol, and return an observable. The observable either has the new data, or is empty if the current ETag is up to date.private static IObservable&lt;Tuple&lt;string, string>> GetFromWeb(string url, string etag) { return Observable.Create&lt;Tuple&lt;string, string>>(async observer => { using (var client = CreateWebClient()) { var request = new HttpRequestMessage { Method = HttpMethod.Get, RequestUri = new Uri(url) }; if (!string.IsNullOrEmpty(etag)) { request.Headers.TryAddWithoutValidation(\"If-None-Match\", etag); } var response = await client.SendAsync(request) .ConfigureAwait(false); if (!response.IsSuccessStatusCode &amp;&amp; response.StatusCode != HttpStatusCode.NotModified) { observer.OnError(new HttpRequestException( \"Status code: \" + response.StatusCode)); } else if (response.IsSuccessStatusCode) { var data = await response.Content.ReadAsStringAsync() .ConfigureAwait(false); observer.OnNext(Tuple.Create(response.Headers.ETag.Tag, data)); } } observer.OnCompleted(); }); } The Get partCombining this fetch method with cache calls requires some reactive magic. Thankfully the Reactive Extensions library contains a large number of methods that we can take advantage of.First up we need to get the existing cached value, if it’s available.var result = // Get from cache cache.GetObject&lt;string>(url) // Cached values are true .Select(x => Tuple.Create(x, true)) // Turn exceptions into false .Catch(Observable.Return(Tuple.Create(\"\", false))) // If true, return an observable with the result, else an empty observable. .SelectMany(x => x.Item2 ? Observable.Return(x.Item1) : Observable.Empty&lt;string>()); Combining Get and FetchNow we need to create the Fetch observable. We also need to get and store the ETag in the cache.var fetch = // Get the ETag from cache cache.GetObject&lt;string>(\"etag-\" + url) // Exceptions => Blank ETag .Catch(Observable.Return(\"\")) // Call our web method .SelectMany(etag => GetFromWeb(url, etag) // Invalidate the old and add the new etag to the cache .SelectMany(x => cache.InvalidateObject&lt;string>(\"etag-\" + url).Select(_ => x)) .SelectMany(x => cache.InsertObject(\"etag-\" + url, x.Item1).Select(_ => x)) // Invalidate the old and add the new data to the cache .SelectMany(x => cache.InvalidateObject&lt;string>(url).Select(_ => x)) .SelectMany(x => cache.InsertObject(url, x.Item2).Select(_ => x))) // Select the data from the tuple .Select(x => x.Item2); return result .Concat(fetch) .Replay() .RefCount(); The full extension method is available here.","categories":[],"tags":[{"name":"akavache","slug":"akavache","permalink":"http://cam.macfar.land/tags/akavache/"},{"name":"etag","slug":"etag","permalink":"http://cam.macfar.land/tags/etag/"},{"name":"web","slug":"web","permalink":"http://cam.macfar.land/tags/web/"},{"name":"cache","slug":"cache","permalink":"http://cam.macfar.land/tags/cache/"}]},{"title":"Cool New Features of C# 6","slug":"cool-new-features-of-c-6","date":"2015-05-27T16:00:00.000Z","updated":"2018-05-23T04:48:38.918Z","comments":true,"path":"cool-new-features-of-c-6/","link":"","permalink":"http://cam.macfar.land/cool-new-features-of-c-6/","excerpt":"C# 6.0 is coming soon, and being a brand spanking new compiler there’s a bunch of new features and fixes to the language.","text":"C# 6.0 is coming soon, and being a brand spanking new compiler there’s a bunch of new features and fixes to the language.Here’s the list.Auto-property InitializersGetter-only Auto-propertiesStatic UsingIndex Initializersawait Inside Catch/Finally BlockException FiltersExpression-bodied MembersNull ConditionalString Interpolationnameof OperatorAuto-property InitializersYou can now set a default value for auto-properties directly on the property, instead of in the constructor.public int X { get; set; } = x; Getter-only Auto-propertiesA getter only property is just that, a property that only has a getter. Previously you had to define the backing field and manually write the getter yourself. But now you can do this.public int Y { get; } = y; This means you can also assign getter-only auto-properties within your constructor only, like readonly fields.Static UsingIn C# 6 it’s possible to reference a static class with a using alias, and avoid having to repeat the class name in code.using static System.Console; class Program { static void Main() { WriteLine(\"Hello World\"); ReadLine(); } } Index InitializersIn C# 6 you can now initialize an object that has an index property as part of an object initialization.var dictionary = new Dictionary&lt;string, int> { [\"three\"] = 3, [\"seven\"] = 7 }; Await Inside Catch/Finally BlockPrior to C# 6 you couldn’t use await inside a catch or finally block. Instead you’d get error CS1985: Cannot await in the body of a catch clause. Now you can! Enjoy.Exception FiltersThis has been available in VisualBasic for a while now, and now C# can do this too.try { // web code } catch (WebException ex) when (ex.Status == WebExceptionStatus.Timeout) { // log timeout } catch (WebException ex) when (ex.Status == WebExceptionStatus.ConnectionClosed) { // log connection closed } catch (WebException ex) { // all other WebExceptions } Expression-bodied MembersIf you have methods or getter-only properties with a single line of code, you can now define that method with simpler syntax.public string ToString() => FirstName + \" \" + LastName; public string FullName => FirstName + \" \" + LastName; Null ConditionalHave you ever chained a bunch of properties and methods together, only to find one of the links in the chain returns null? Well now you can use the Null-Conditional Operator (?.) to handle null for you.string x = something?.withproperty?.CallsMethod()?.Value; How does it work? The entire expression will evaluate, but if any of the subexpressions return null then the whole thing returns the default value for the expression, which in this case is a null string.If the expression ended with a value type, like int, then the default value would be 0. I recommend using int? so you can check if the expression failed by checking for null.String InterpolationYou know how in Razor you can escape the html to evaulate code? Now you can do the same thing in C#.public string ToString() => $\"{FirstName} {LastName}\"; The bit inside the braces {} is evaluated as C# code, which means you can put expressions in there too.WriteLine($\"The distance is {Sqrt(p.x * p.x + p.y * p.y)} meters.\"); Nameof OperatorThere is now a nameof operator that returns the name of the item as a string.throw new ArgumentNullException(nameof(item)); The benefit of this is that the whole thing is now rename safe.","categories":[],"tags":[{"name":"c#","slug":"c","permalink":"http://cam.macfar.land/tags/c/"},{"name":"language","slug":"language","permalink":"http://cam.macfar.land/tags/language/"},{"name":"roslyn","slug":"roslyn","permalink":"http://cam.macfar.land/tags/roslyn/"}]},{"title":"Mitigating The Billion Dollar Mistake - Fody Edition","slug":"mitigating-the-billion-dollar-mistake-fody-edition","date":"2013-01-08T16:00:00.000Z","updated":"2018-05-23T04:48:49.142Z","comments":true,"path":"mitigating-the-billion-dollar-mistake-fody-edition/","link":"","permalink":"http://cam.macfar.land/mitigating-the-billion-dollar-mistake-fody-edition/","excerpt":"Phil Haack recently wrote a post in which he talked about protecting C# code from null references by automatically adding guard code. Phil’s implementation used PostSharp for the post compile injection. Instead I wanted to use Fody.","text":"Phil Haack recently wrote a post in which he talked about protecting C# code from null references by automatically adding guard code. Phil’s implementation used PostSharp for the post compile injection. Instead I wanted to use Fody.Fody vs PostSharpFody and PostSharp are both post-compile tools that add extra code into your assembly. This is known as Aspect Orientated Programming and can be very useful for certain tasks.PostSharp takes the approach of injecting generic hook code into your assembly, and then calling out to your aspect at runtime. Your aspect then runs, doing any code analysis and reflection at runtime to do it’s work. (This was my experience with PostSharp V1 ages ago. Apparently you can do some reflection at compile time in V2.1, but not all of it. See the documentation.) The final assembly still needs a reference to PostSharp, as well as any aspects you have added.Also, for a simple 1 line method PostSharp produces this.// Note the [AllowNull] attribute is still in the code. public void SomeMethod(string nonNullArg, [AllowNull] string nullArg) { MethodExecutionArgs methodExecutionArgs = new MethodExecutionArgs(this, new Arguments&lt;string, string> { Arg0 = nonNullArg, Arg1 = nullArg }); MethodExecutionArgs arg_25_0 = methodExecutionArgs; MethodBase m = SampleClass.&lt;>z__Aspects.m15; arg_25_0.Method = m; SampleClass.&lt;>z__Aspects.a3.OnEntry(methodExecutionArgs); if (methodExecutionArgs.FlowBehavior != FlowBehavior.Return) { Console.WriteLine(nonNullArg); // NOTE: This is our original line. SampleClass.&lt;>z__Aspects.a3.OnSuccess(methodExecutionArgs); } } Not very clear at all!In contrast, Fody extension only run at compile time. Fody uses Mono.Cecil to allow you to modify the IL before the Fody compile step writes the assembly back out. That assembly has no references to Fody, and the aspects are woven directly into the code. The problem with this approach is that you have to know IL in order to write your own Fody extension, whereas in PostSharp you just write a .NET assembly with the code you want executed at runtime.// Attribute removed from compiled code. public void SomeMethod(string nonNullArg, string nullArg) { if (nonNullArg == null) { throw new ArgumentNullException(\"nonNullArg\"); } Console.WriteLine(nonNullArg); // NOTE: This is our original line. } Much cleaner, and easier to understand what this code is doing.How to use NullGuardNullGuard is available via NuGet.PM&gt; Install-Package NullGuard.Fody As an extension to Fody it will automatically include Fody as a dependency.Other ExtensionsThere are a bunch of other extensions for Fody, so most of the time you won’t need to write a custom extension. You can find them by searching for ‘Fody‘ on NuGet.Here are a few of my favourites.PropertyChanging.Fody and PropertyChanged.Fody If you do any sort of MVVM development then these are a lifesaver! Automatically inserts PropertyChanging and PropertyChanged code into property setters. Never have to call OnPropertyChanged() ever again!ModuleInit.Fody In .NET assemblies you can execute code when the assembly is loaded by putting it in a special class called &lt;Module&gt;. Unfortunately there is no way to access this class from C#. This extension allows you to write code that will execute when the &lt;Module&gt; is initialized.Validar.Fody Similar to PropertyChanged.Fody this injects code to automatically implement IDataErrorInfo and INotifyDataErrorInfo. Our ViewModels keep getting smaller and smaller!","categories":[],"tags":[{"name":"fody","slug":"fody","permalink":"http://cam.macfar.land/tags/fody/"},{"name":"aop","slug":"aop","permalink":"http://cam.macfar.land/tags/aop/"}]},{"title":"Attachments","slug":"attachments","date":"2012-09-16T16:00:00.000Z","updated":"2018-05-23T04:48:55.958Z","comments":true,"path":"attachments/","link":"","permalink":"http://cam.macfar.land/attachments/","excerpt":"Where we reach the crazy portion of the program.","text":"Where we reach the crazy portion of the program.One of the biggest problems I’ve seen with any non-trivial MVVM application is that of mega-ViewModels AKA God objects. And it’s not just me. Many people have the same problem.MVVM and avoiding Monolithic God object on StackOverflowDataContext and the Lone ViewModelWhy is it that we only have one ViewModel per View? Well for the whole thing to work the ViewModel must be assigned to the DataContext of the View. This necessitates a one View - one ViewModel idea.ViewModels must handle lots of different things. Sometimes they are data entry, needing access to the data store and maybe some validation routines. Sometimes they are navigation waypoints, allowing the user to create a new document, open an existing one, or open some other part of the application.This idea leads to ViewModels doing way more than they should. For cross-cutting concerns the standard approach is to use a service, which is just a class in your IoC that can be passed into your ViewModel. This works great for things like MessageBoxes, standard Open/Save/Print dialogs, etc.This leaves concerns that are ViewModel specific, but may not be related to each other. Usually this causes the ViewModel to violate the single responsibility principle by implementing multiple concerns in the same class.Attached BehavioursIn his blog entry on Attached Behaviours John Gossman has this to say.The Attached Behavior pattern encapsulates “behavior” (usually user interactivity) into a class outside the visual heirarchy and allows it to be applied to a visual element by setting an attached property and hooking various events on the visual element.Attached behaviours are an implementation of the decorator pattern which allows you to separate behaviours or concerns into a discrete class and attach to the visual element.So what if we treated the ViewModel as just a specialized storage for the View, like a ViewBag in ASP.net MVC, and put all the behaviours of the ViewModel into an attachment that we expose through the ViewModel via public properties?What if our ViewModel was just a bunch of public properties?What if we used some sort of attachment to add behaviour to that ViewModel?Attachments to ViewModelsA ViewModel can have multiple attachments, each fulfilling a specific purpose. An attachment can set up initial values for properties, and assign ICommands for the ViewModel.interface IAttachment { void AttachTo(object obj); } abstract class Attachment&lt;T> : IAttachment { protected T viewModel; protected abstract void OnAttach(); void IAttachment.AttachTo(object obj) { viewModel = (T)obj; OnAttach(); } } class SampleAttachment : Attachment&lt;SampleViewModel> { protected override void OnAttach() { // ... set up properties in the view model } } class SampleViewModel : ViewModelBase { public string SomeProperty { get; set; } pubic ICommand DoSomething { get; set; } } Setting up an attachment is pretty straightforward. You can simply call the attachment from the constructor of the ViewModel itself. A better option however is to use your IoC to automate the attachment process. Here’s an example of how to do this in Autofac.class AutoAttachmentModule : Module { protected override void AttachToComponentRegistration( IComponentRegistry componentRegistry, IComponentRegistration registration) { registration.Activating += Activating; } void Activating(object sender, ActivatingEventArgs&lt;object> e) { var vmType = e.Instance.GetType(); // Convention to find attachments from a ViewModel // This can be done better. var attachmentType = Type.GetType( vmType.FullName.ReplaceAll(\"ViewModel\", \"Attachment\")); if (attachmentType == null || !e.Context.IsRegistered(attachmentType)) return; var attachment = (IAttachment)e.Context.Resolve(attachmentType); attachment.AttachTo(e.Instance); } } Attachments allows for the separation of parts of of a ViewModel that cannot otherwise be broken up with sub-ViewModels.We can test the View-ViewModel binding without worrying about triggering an interaction in the ViewModel’s implementation.We can also test the ViewModel-Attachment interaction without worrying about whether our bindings are correct. And with each logical part being in a separate Attachment we can test them in isolation without side-effect.","categories":[],"tags":[{"name":"architecture","slug":"architecture","permalink":"http://cam.macfar.land/tags/architecture/"},{"name":"mvvm","slug":"mvvm","permalink":"http://cam.macfar.land/tags/mvvm/"}]},{"title":"Existing MVVM Frameworks","slug":"existing-mvvm-frameworks","date":"2012-08-12T16:00:00.000Z","updated":"2018-05-23T04:49:02.862Z","comments":true,"path":"existing-mvvm-frameworks/","link":"","permalink":"http://cam.macfar.land/existing-mvvm-frameworks/","excerpt":"This post is part of a series about desktop application development in WPF using MVVM.","text":"This post is part of a series about desktop application development in WPF using MVVM.Currently there are at least 19 MVVM frameworks out there as well as any number of privately rolled frameworks for doing MVVM style development. But what makes them MVVM frameworks?Most frameworks implement some sort of base class or helper for implementing INotifyPropertyChanged and some sort of ICommand implementation which usually just takes some code as a delegate and uses that as the commands body.By far one of the most popular frameworks is Caliburn.Micro. It’s very easy to use, has good documentation and allows new projects to get going quickly. However it, like the other frameworks, doesn’t address the issues I stated in the previous post. So once you’ve used Caliburm.Micro for anything other than a basic project with a handful of screens you start to see large ViewModels, and lots of hand cranked INotifyPropertyChanged code again.Some people argue that you shouldn’t be writing any code to deal with INotifyPropertyChanged. And they are right. But the problem with MVVM frameworks is they try to help you, and so their documentation ends up saying to implement a ViewModel do this…private string someProperty; public string SomeProperty { get { return someProperty; } set { if (someProperty != value) return someProperty = value; MyFramework.SomeHelper(x => this.SomeProperty); } } Blergh!Once you’ve learned to do this it keeps being done and people repeat the mistake. Instead there are tools like NotifyPropertyWeaver which can automate this sort of hand cranked donkey code for you.And this is where I think the idea of an MVVM framework falls down. Instead what we should have is a technology stack that provides solutions to all the issues involved in making a non-trivial MVVM application.So what is in my stack at the moment?Caliburn.Micro - Used for View/ViewModel management only. I like how Caliburn.Micro is ViewModel driven, and controls the lifetime of a ViewModel, as well as providing a guard for closing a ViewModel so you can ask the user if they would like to save before closing, for example.ReactiveUI - I’ve come around to the whole reactive paradigm, especially when it’s applied to ViewModels that have a PropertyChanged event. ReactiveUI allows me to watch a collection of ViewModels for any changes, and execute some code based on that. Another use is as a stream of progress events, and the UI subscribes to a sampling of that stream and displays the progress.Autofac - My IoC of choice, but really you could use any here, with the possible exception of Unity. If you must use Microsoft use MEF. And as Ian says, IoC a Nike technology, Just do it!PropertyChanged.Fody and PropertyChanging.Fody (with Fody) - Fody is Simon Cropp’s project for generic post compile code injection, or Aspect oriented Programming. PropertyChanged.Fody is the successor to NotifyPropertyWeaver and so I tend to use it on newer projects. If you’re already on NotifyPropertyWeaver give yourself a gold star, but don’t worry about swapping if it does what you need.Automapper - Automapper is designed to take all the dull work of mapping two objects with the same properties to each other. This is brilliant for mapping say a Model (or DTO) to a ViewModel instead of being lazy and just shoving the Model towards the View and letting it fend for itself.Is that all? Well no, there are other systems I use to make my life easier as a developer. Now that I’ve got the main subsystems that people know about out the way I’ll talk about some other tools to help even more in my next post.","categories":[],"tags":[{"name":"architecture","slug":"architecture","permalink":"http://cam.macfar.land/tags/architecture/"},{"name":"mvvm","slug":"mvvm","permalink":"http://cam.macfar.land/tags/mvvm/"}]},{"title":"The State of MVVM","slug":"the-state-of-mvvm","date":"2012-08-06T16:00:00.000Z","updated":"2018-05-23T04:49:07.427Z","comments":true,"path":"the-state-of-mvvm/","link":"","permalink":"http://cam.macfar.land/the-state-of-mvvm/","excerpt":"Ok, so I’ve been meaning to (procrastinating actually) write a blog entry for a while now.","text":"Ok, so I’ve been meaning to (procrastinating actually) write a blog entry for a while now.Over the past year or so I’ve been struggling to come up with a simple, easy, repeatable way to develop applications for WPF. And while the Model-View-ViewModel (MVVM) pattern gets us a long way there it’s not without issues.Other people have tried addressing the shortcomings of WPF by going for a Model-View-Controller (MVC) pattern, but this implies a navigation style user experience, which isn’t always the case. Take multi-document interfaces for example, where there may be multiple Views open, all of which are active (documents, tool windows, etc.).So instead I decided to tackle the issues as I saw them with using the MVVM pattern. The most major issues I had were:Mega-ViewModels - ViewModels that because they do so much, require massive amounts of services and a massive amount of code, effectively making them God objects. This also breaks the Single Responsibility Principle.UI Models - This is the term I use to describe a Model that has been presented directly to the View either through the ViewModel or not. An easy way to spot these objects is they are a Model, but they implement INotifyPropertyChanged or some other UI behaviour or code. For small projects you can get away with this but as the projects goes the issues from this get worse leading to more pain.Code Grinding - Writing the same code over and over to implement some architectural pattern isn’t fun. For MVVM the standard grind is implementing INotifyPropertyChanged. And while most MVVM frameworks have a base implementation that you can use to simplify the implementation they still require you to write some sort of code in every property setter, plus if you have other properties dependant on that property they must also call the changed event.Over the next few blog posts I hope to demonstrate a set of tools and utilities that will help with these issues, and generally make it easier to develop desktop applications using the MVVM pattern. So far I’ve only applied the solution to WPF applications but I don’t see why it couldn’t also work in Silverlight or WinRT when the MVVM pattern is implemented.","categories":[],"tags":[{"name":"architecture","slug":"architecture","permalink":"http://cam.macfar.land/tags/architecture/"},{"name":"mvvm","slug":"mvvm","permalink":"http://cam.macfar.land/tags/mvvm/"}]}]}