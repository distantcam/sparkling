<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cam&#39;s Blog</title>
    <link>http://cam.macfar.land/</link>
    <atom:link href="/feed.rss" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 18 Feb 2019 03:29:47 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Blog Update 2018</title>
      <link>http://cam.macfar.land/Blog-Update-2018/</link>
      <guid>http://cam.macfar.land/Blog-Update-2018/</guid>
      <pubDate>Wed, 23 May 2018 08:33:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;My wife keeps pointing out that every time I feel like writing a blog post I spend so much time updating the blog code itself that I never actually write a blogpost.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>My wife keeps pointing out that every time I feel like writing a blog post I spend so much time updating the blog code itself that I never actually write a blogpost.</p><a id="more"></a><p>They do have a point. I tend to use updating the blog code as an excuse to not write a blog post. So this time I’ve decided to combine them by writing a blog post about the technology and updates used in this blog.</p><hr><p><a href="https://hexo.io/" target="_blank" rel="noopener"><img src="hexo-logo.png" width="128" height="128" alt="Hexo Logo"></a></p><div class="row ml-0"><h3>Hexo</h3><div class="align-text-bottom ml-3 mt-1"><a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></div></div><p>Hexo is a static blog generator written in node.js. Being a node app it’s easy to grab and runs on multiple platforms. It supports templating and has lots of plugins for adding features to your blog.</p><hr><p><a href="https://startbootstrap.com/template-overviews/clean-blog/" target="_blank" rel="noopener"><img src="clean-blog.jpg" width="375" height="225" alt="Clean Blog Screenshot"></a></p><h3 id="Clean-Blog-Template"><a href="#Clean-Blog-Template" class="headerlink" title="Clean Blog Template"></a>Clean Blog Template</h3><p><a href="https://startbootstrap.com/template-overviews/clean-blog/" target="_blank" rel="noopener">https://startbootstrap.com/template-overviews/clean-blog/</a></p><p>There is an existing hexo version of the clean blog template, but it didn’t do what I wanted. So instead I converted it myself. Nice clean design with image headers.</p><hr><p><a href="https://unsplash.com/" target="_blank" rel="noopener"><img src="https://source.unsplash.com/daily?blog" style="max-height:200px" alt="Unsplash blog image of the day"></a></p><div class="row ml-0"><h3>Unsplash</h3><div class="align-text-bottom ml-3 mt-1"><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></div></div><p>Unsplash is a great source of royalty free high quality photos for my blog. It allow hot linking, and doesn’t require attribution, however in my template I do provide attribution where possible. In my template I just have to provide a photo id, and it takes care of the rest. Given the style of blog I wanted, providing high quality images easily and royalty free is wonderful.</p><hr><h3 id="Gitment"><a href="#Gitment" class="headerlink" title="Gitment"></a>Gitment</h3><p><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a><br><a href="https://github.com/aimingoo/gitmint" target="_blank" rel="noopener">https://github.com/aimingoo/gitmint</a></p><p>Gitment (&amp; Gitmint) is a comment system that uses github issues to track comments. This is amazing. Given this blog is hosted on github gitment makes sense. I used to use disqus, but I’ve switched completely to gitment now.</p><hr><p>And that’s it. I want to add more features to this blog, but it’s good enough for now. Hopefully now I’ll write another post sometime within the next 3 years.</p>]]></content:encoded>
      
      <comments>http://cam.macfar.land/Blog-Update-2018/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Akavache and ETags</title>
      <link>http://cam.macfar.land/akavache-and-etags/</link>
      <guid>http://cam.macfar.land/akavache-and-etags/</guid>
      <pubDate>Fri, 17 Jul 2015 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Akavache is a cool caching library from the prolific Paul Betts that simplifies caching of data in your application. I wanted to use it with web calls that provided an ETag for caching but Akavache didn’t support this out of the box.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Akavache is a cool caching library from the prolific Paul Betts that simplifies caching of data in your application. I wanted to use it with web calls that provided an ETag for caching but Akavache didn’t support this out of the box.</p><a id="more"></a><p>There’s a method in Akavache called <code>GetAndFetchLatest</code> which sounded like what I wanted, but the fetch part was time based, not ETag, as the fetch could be anything not just a web query.</p><p>So I set out to implement my own version of <code>GetAndFetchLatest</code> that was web specific, and only updated the cache when there was new content from the server. First up I needed a method that would query the server using a given ETag, and return an empty result, or the new content. <code>GetAndFetchLatest</code> has a very nice mechanism where it returns an observable of results. First the cached version is published on the observable, then the fetched version, so you can perform an update as the newer data comes in.</p><h3 id="The-Fetch-part"><a href="#The-Fetch-part" class="headerlink" title="The Fetch part"></a>The Fetch part</h3><p>For my method that fetches the data from the server it needed to be aware of the ETag protocol, and return an observable. The observable either has the new data, or is empty if the current ETag is up to date.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> IObservable<span class="token operator">&lt;</span>Tuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">GetFromWeb</span><span class="token punctuation">(</span><span class="token keyword">string</span> url<span class="token punctuation">,</span> <span class="token keyword">string</span> etag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span>Create<span class="token operator">&lt;</span>Tuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">async</span> observer <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token function">CreateWebClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestMessage</span>            <span class="token punctuation">{</span>                Method <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">,</span>                RequestUri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>etag<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryAddWithoutValidation</span><span class="token punctuation">(</span><span class="token string">"If-None-Match"</span><span class="token punctuation">,</span> etag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>IsSuccessStatusCode <span class="token operator">&amp;&amp;</span>                 response<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> HttpStatusCode<span class="token punctuation">.</span>NotModified<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                observer<span class="token punctuation">.</span><span class="token function">OnError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpRequestException</span><span class="token punctuation">(</span>                    <span class="token string">"Status code: "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>IsSuccessStatusCode<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                observer<span class="token punctuation">.</span><span class="token function">OnNext</span><span class="token punctuation">(</span>Tuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ETag<span class="token punctuation">.</span>Tag<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        observer<span class="token punctuation">.</span><span class="token function">OnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="The-Get-part"><a href="#The-Get-part" class="headerlink" title="The Get part"></a>The Get part</h3><p>Combining this fetch method with cache calls requires some reactive magic. Thankfully the Reactive Extensions library contains a large number of methods that we can take advantage of.</p><p>First up we need to get the existing cached value, if it’s available.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> result <span class="token operator">=</span>     <span class="token comment" spellcheck="true">// Get from cache</span>    cache<span class="token punctuation">.</span><span class="token generic-method function">GetObject<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Cached values are true</span>    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> Tuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// Turn exceptions into false</span>    <span class="token punctuation">.</span><span class="token function">Catch</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>Tuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// If true, return an observable with the result, else an empty observable.</span>    <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Item2 <span class="token operator">?</span> Observable<span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Item1<span class="token punctuation">)</span> <span class="token punctuation">:</span> Observable<span class="token punctuation">.</span><span class="token generic-method function">Empty<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Combining-Get-and-Fetch"><a href="#Combining-Get-and-Fetch" class="headerlink" title="Combining Get and Fetch"></a>Combining Get and Fetch</h3><p>Now we need to create the Fetch observable. We also need to get and store the ETag in the cache.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> fetch <span class="token operator">=</span>     <span class="token comment" spellcheck="true">// Get the ETag from cache</span>    cache<span class="token punctuation">.</span><span class="token generic-method function">GetObject<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"etag-"</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Exceptions => Blank ETag</span>    <span class="token punctuation">.</span><span class="token function">Catch</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Call our web method</span>    <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>etag <span class="token operator">=</span><span class="token operator">></span> <span class="token function">GetFromWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> etag<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Invalidate the old and add the new etag to the cache</span>        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> cache<span class="token punctuation">.</span><span class="token generic-method function">InvalidateObject<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"etag-"</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> cache<span class="token punctuation">.</span><span class="token function">InsertObject</span><span class="token punctuation">(</span><span class="token string">"etag-"</span> <span class="token operator">+</span> url<span class="token punctuation">,</span> x<span class="token punctuation">.</span>Item1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Invalidate the old and add the new data to the cache</span>        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> cache<span class="token punctuation">.</span><span class="token generic-method function">InvalidateObject<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> cache<span class="token punctuation">.</span><span class="token function">InsertObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> x<span class="token punctuation">.</span>Item2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Select the data from the tuple</span>    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Item2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result    <span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">Replay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">RefCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The full extension method is available <a href="https://gist.github.com/distantcam/06e08761a3c5884949fe" target="_blank" rel="noopener">here</a>.</p>]]></content:encoded>
      
      <comments>http://cam.macfar.land/akavache-and-etags/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cool New Features of C# 6</title>
      <link>http://cam.macfar.land/cool-new-features-of-c-6/</link>
      <guid>http://cam.macfar.land/cool-new-features-of-c-6/</guid>
      <pubDate>Wed, 27 May 2015 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;C# 6.0 is coming soon, and being a brand spanking new compiler there’s a bunch of new features and fixes to the language.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>C# 6.0 is coming soon, and being a brand spanking new compiler there’s a bunch of new features and fixes to the language.</p><a id="more"></a><p>Here’s the list.</p><ul><li><a href="#autopropinit">Auto-property Initializers</a></li><li><a href="#getteronlyprop">Getter-only Auto-properties</a></li><li><a href="#staticusing">Static Using</a></li><li><a href="#indexinit">Index Initializers</a></li><li><a href="#catchawait"><code>await</code> Inside Catch/Finally Block</a></li><li><a href="#exceptionfilters">Exception Filters</a></li><li><a href="#expressionbodies">Expression-bodied Members</a></li><li><a href="#nullconditional">Null Conditional</a></li><li><a href="#stringinterpolation">String Interpolation</a></li><li><a href="#nameof"><code>nameof</code> Operator</a></li></ul><h4 id="Auto-property-Initializers"><a href="#Auto-property-Initializers" class="headerlink" title="Auto-property Initializers"></a><a id="autopropinit">Auto-property Initializers</a></h4><p>You can now set a default value for auto-properties directly on the property, instead of in the constructor.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">int</span> X <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Getter-only-Auto-properties"><a href="#Getter-only-Auto-properties" class="headerlink" title="Getter-only Auto-properties"></a><a id="getteronlyprop">Getter-only Auto-properties</a></h4><p>A getter only property is just that, a property that only has a getter. Previously you had to define the backing field and manually write the getter yourself. But now you can do this.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">int</span> Y <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This means you can also assign getter-only auto-properties within your constructor only, like readonly fields.</p><h4 id="Static-Using"><a href="#Static-Using" class="headerlink" title="Static Using"></a><a id="staticusing">Static Using</a></h4><p>In C# 6 it’s possible to reference a static class with a using alias, and avoid having to repeat the class name in code.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token keyword">static</span> System<span class="token punctuation">.</span>Console<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Index-Initializers"><a href="#Index-Initializers" class="headerlink" title="Index Initializers"></a><a id="indexinit">Index Initializers</a></h4><p>In C# 6 you can now initialize an object that has an index property as part of an object initialization.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token string">"three"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"seven"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Await-Inside-Catch-Finally-Block"><a href="#Await-Inside-Catch-Finally-Block" class="headerlink" title="Await Inside Catch/Finally Block"></a><a id="catchawait">Await Inside Catch/Finally Block</a></h4><p>Prior to C# 6 you couldn’t use <code>await</code> inside a <code>catch</code> or <code>finally</code> block. Instead you’d get <code>error CS1985: Cannot await in the body of a catch clause</code>. Now you can! Enjoy.</p><h4 id="Exception-Filters"><a href="#Exception-Filters" class="headerlink" title="Exception Filters"></a><a id="exceptionfilters">Exception Filters</a></h4><p>This has been available in VisualBasic for a while now, and now C# can do this too.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// web code</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WebException</span> ex<span class="token punctuation">)</span> <span class="token function">when</span> <span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Status <span class="token operator">==</span> WebExceptionStatus<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// log timeout</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WebException</span> ex<span class="token punctuation">)</span> <span class="token function">when</span> <span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Status <span class="token operator">==</span> WebExceptionStatus<span class="token punctuation">.</span>ConnectionClosed<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// log connection closed</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WebException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// all other WebExceptions</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Expression-bodied-Members"><a href="#Expression-bodied-Members" class="headerlink" title="Expression-bodied Members"></a><a id="expressionbodies">Expression-bodied Members</a></h4><p>If you have methods or getter-only properties with a single line of code, you can now define that method with simpler syntax.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> FirstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> LastName<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">string</span> FullName <span class="token operator">=</span><span class="token operator">></span> FirstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> LastName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Null-Conditional"><a href="#Null-Conditional" class="headerlink" title="Null Conditional"></a><a id="nullconditional">Null Conditional</a></h4><p>Have you ever chained a bunch of properties and methods together, only to find one of the links in the chain returns <code>null</code>? Well now you can use the Null-Conditional Operator (<code>?.</code>) to handle <code>null</code> for you.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">string</span> x <span class="token operator">=</span> something<span class="token operator">?</span><span class="token punctuation">.</span>withproperty<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">CallsMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>How does it work? The entire expression will evaluate, but if any of the subexpressions return <code>null</code> then the whole thing returns the default value for the expression, which in this case is a <code>null string</code>.</p><p>If the expression ended with a value type, like <code>int</code>, then the default value would be <code>0</code>. I recommend using <code>int?</code> so you can check if the expression failed by checking for <code>null</code>.</p><h4 id="String-Interpolation"><a href="#String-Interpolation" class="headerlink" title="String Interpolation"></a><a id="stringinterpolation">String Interpolation</a></h4><p>You know how in Razor you can escape the html to evaulate code? Now you can do the same thing in C#.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> $<span class="token string">"{FirstName} {LastName}"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The bit inside the braces <code>{}</code> is evaluated as C# code, which means you can put expressions in there too.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"The distance is {Sqrt(p.x * p.x + p.y * p.y)} meters."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Nameof-Operator"><a href="#Nameof-Operator" class="headerlink" title="Nameof Operator"></a><a id="nameof">Nameof Operator</a></h4><p>There is now a <code>nameof</code> operator that returns the name of the item as a string.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The benefit of this is that the whole thing is now rename safe.</p>]]></content:encoded>
      
      <comments>http://cam.macfar.land/cool-new-features-of-c-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mitigating The Billion Dollar Mistake - Fody Edition</title>
      <link>http://cam.macfar.land/mitigating-the-billion-dollar-mistake-fody-edition/</link>
      <guid>http://cam.macfar.land/mitigating-the-billion-dollar-mistake-fody-edition/</guid>
      <pubDate>Tue, 08 Jan 2013 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://haacked.com/articles/AboutHaacked.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Phil Haack&lt;/a&gt; recently wrote a &lt;a href=&quot;http://haacked.com/archive/2013/01/05/mitigate-the-billion-dollar-mistake-with-aspects.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;post&lt;/a&gt; in which he talked about protecting &lt;abbr&gt;C#&lt;/abbr&gt; code from null references by automatically adding guard code. Phil’s implementation used PostSharp for the post compile injection. Instead I wanted to use Fody.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://haacked.com/articles/AboutHaacked.aspx" target="_blank" rel="noopener">Phil Haack</a> recently wrote a <a href="http://haacked.com/archive/2013/01/05/mitigate-the-billion-dollar-mistake-with-aspects.aspx" target="_blank" rel="noopener">post</a> in which he talked about protecting <abbr>C#</abbr> code from null references by automatically adding guard code. Phil’s implementation used PostSharp for the post compile injection. Instead I wanted to use Fody.</p><a id="more"></a><h3 id="Fody-vs-PostSharp"><a href="#Fody-vs-PostSharp" class="headerlink" title="Fody vs PostSharp"></a>Fody vs PostSharp</h3><p><a href="https://github.com/Fody/Fody/" target="_blank" rel="noopener">Fody</a> and <a href="http://www.sharpcrafters.com/" target="_blank" rel="noopener">PostSharp</a> are both post-compile tools that add extra code into your assembly. This is known as <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming" target="_blank" rel="noopener">Aspect Orientated Programming</a> and can be very useful for certain tasks.</p><p>PostSharp takes the approach of injecting generic hook code into your assembly, and then calling out to your aspect at runtime. Your aspect then runs, doing any code analysis and reflection at runtime to do it’s work. (This was my experience with PostSharp <abbr>V1</abbr> ages ago. Apparently you can do some reflection at compile time in <abbr>V2.1</abbr>, but not all of it. See the <a href="http://doc.sharpcrafters.com/postsharp-2.1/Default.aspx##PostSharp-2.1.chm/html/7480ca54-61c0-46c5-9914-60a58c3033e8.htm" target="_blank" rel="noopener">documentation</a>.) The final assembly still needs a reference to PostSharp, as well as any aspects you have added.</p><p>Also, for a simple 1 line method PostSharp produces this.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Note the [AllowNull] attribute is still in the code.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token keyword">string</span> nonNullArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>AllowNull<span class="token punctuation">]</span> <span class="token keyword">string</span> nullArg<span class="token punctuation">)</span><span class="token punctuation">{</span>    MethodExecutionArgs methodExecutionArgs <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">MethodExecutionArgs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Arguments</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Arg0 <span class="token operator">=</span> nonNullArg<span class="token punctuation">,</span>            Arg1 <span class="token operator">=</span> nullArg        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodExecutionArgs arg_25_0 <span class="token operator">=</span> methodExecutionArgs<span class="token punctuation">;</span>    MethodBase m <span class="token operator">=</span> SampleClass<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">></span>z__Aspects<span class="token punctuation">.</span>m15<span class="token punctuation">;</span>    arg_25_0<span class="token punctuation">.</span>Method <span class="token operator">=</span> m<span class="token punctuation">;</span>    SampleClass<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">></span>z__Aspects<span class="token punctuation">.</span>a3<span class="token punctuation">.</span><span class="token function">OnEntry</span><span class="token punctuation">(</span>methodExecutionArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodExecutionArgs<span class="token punctuation">.</span>FlowBehavior <span class="token operator">!=</span> FlowBehavior<span class="token punctuation">.</span>Return<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>nonNullArg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NOTE: This is our original line.</span>        SampleClass<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">></span>z__Aspects<span class="token punctuation">.</span>a3<span class="token punctuation">.</span><span class="token function">OnSuccess</span><span class="token punctuation">(</span>methodExecutionArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Not very clear at all!</p><p>In contrast, Fody extension only run at compile time. Fody uses <a href="http://www.mono-project.com/Cecil" target="_blank" rel="noopener">Mono.Cecil</a> to allow you to modify the <abbr>IL</abbr> before the Fody compile step writes the assembly back out. That assembly has no references to Fody, and the aspects are woven directly into the code. The problem with this approach is that you have to know <abbr>IL</abbr> in order to write your own Fody extension, whereas in PostSharp you just write a <abbr>.NET</abbr> assembly with the code you want executed at runtime.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Attribute removed from compiled code.</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token keyword">string</span> nonNullArg<span class="token punctuation">,</span> <span class="token keyword">string</span> nullArg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nonNullArg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"nonNullArg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>nonNullArg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NOTE: This is our original line.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Much cleaner, and easier to understand what this code is doing.</p><h3 id="How-to-use-NullGuard"><a href="#How-to-use-NullGuard" class="headerlink" title="How to use NullGuard"></a>How to use NullGuard</h3><p>NullGuard is available via NuGet.</p><pre><code>PM&gt; Install-Package NullGuard.Fody</code></pre><p>As an extension to Fody it will automatically include Fody as a dependency.</p><h2 id="Other-Extensions"><a href="#Other-Extensions" class="headerlink" title="Other Extensions"></a>Other Extensions</h2><p>There are a bunch of other extensions for Fody, so most of the time you won’t need to write a custom extension. You can find them by searching for ‘<a href="http://nuget.org/packages?q=fody" target="_blank" rel="noopener">Fody</a>‘ on NuGet.</p><p>Here are a few of my favourites.</p><ul><li><p><a href="https://github.com/Fody/PropertyChanging#readme" target="_blank" rel="noopener"><strong>PropertyChanging.Fody</strong></a> and <a href="https://github.com/Fody/PropertyChanged#readme" target="_blank" rel="noopener"><strong>PropertyChanged.Fody</strong></a> If you do any sort of <abbr>MVVM</abbr> development then these are a lifesaver! Automatically inserts <code>PropertyChanging</code> and <code>PropertyChanged</code> code into property setters. Never have to call <code>OnPropertyChanged()</code> ever again!</p></li><li><p><a href="https://github.com/Fody/ModuleInit#readme" target="_blank" rel="noopener"><strong>ModuleInit.Fody</strong></a> In <abbr>.NET</abbr> assemblies you can execute code when the assembly is loaded by putting it in a special class called <code>&lt;Module&gt;</code>. Unfortunately there is no way to access this class from <abbr>C#</abbr>. This extension allows you to write code that will execute when the <code>&lt;Module&gt;</code> is initialized.</p></li><li><p><a href="https://github.com/Fody/Validar#readme" target="_blank" rel="noopener"><strong>Validar.Fody</strong></a> Similar to PropertyChanged.Fody this injects code to automatically implement <code>IDataErrorInfo</code> and <code>INotifyDataErrorInfo</code>. Our ViewModels keep getting smaller and smaller!</p></li></ul>]]></content:encoded>
      
      <comments>http://cam.macfar.land/mitigating-the-billion-dollar-mistake-fody-edition/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Attachments</title>
      <link>http://cam.macfar.land/attachments/</link>
      <guid>http://cam.macfar.land/attachments/</guid>
      <pubDate>Sun, 16 Sep 2012 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Where we reach the crazy portion of the program.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Where we reach the crazy portion of the program.</p><a id="more"></a><p>One of the biggest problems I’ve seen with any non-trivial MVVM application is that of mega-ViewModels AKA <a href="http://en.wikipedia.org/wiki/God_object" target="_blank" rel="noopener">God objects</a>. And it’s not just me. Many people have the same problem.</p><p><a href="http://stackoverflow.com/questions/2951301/mvvm-and-avoiding-monolithic-god-object" target="_blank" rel="noopener">MVVM and avoiding Monolithic God object on StackOverflow</a></p><h2 id="DataContext-and-the-Lone-ViewModel"><a href="#DataContext-and-the-Lone-ViewModel" class="headerlink" title="DataContext and the Lone ViewModel"></a>DataContext and the Lone ViewModel</h2><p>Why is it that we only have one ViewModel per View? Well for the whole thing to work the ViewModel must be assigned to the DataContext of the View. This necessitates a one View - one ViewModel idea.</p><p>ViewModels must handle lots of different things. Sometimes they are data entry, needing access to the data store and maybe some validation routines. Sometimes they are navigation waypoints, allowing the user to create a new document, open an existing one, or open some other part of the application.</p><p>This idea leads to ViewModels doing way more than they should. For <a href="http://en.wikipedia.org/wiki/Cross-cutting_concern" target="_blank" rel="noopener">cross-cutting concerns</a> the standard approach is to use a service, which is just a class in your IoC that can be passed into your ViewModel. This works great for things like MessageBoxes, standard Open/Save/Print dialogs, etc.</p><p>This leaves concerns that are ViewModel specific, but may not be related to each other. Usually this causes the ViewModel to violate the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">single responsibility principle</a> by implementing multiple concerns in the same class.</p><h2 id="Attached-Behaviours"><a href="#Attached-Behaviours" class="headerlink" title="Attached Behaviours"></a>Attached Behaviours</h2><p>In his <a href="http://blogs.msdn.com/b/johngossman/archive/2008/05/07/the-attached-behavior-pattern.aspx" target="_blank" rel="noopener">blog entry</a> on Attached Behaviours John Gossman has this to say.</p><blockquote><p>The Attached Behavior pattern encapsulates “behavior” (usually user interactivity) into a class outside the visual heirarchy and allows it to be applied to a visual element by setting an attached property and hooking various events on the visual element.</p></blockquote><p>Attached behaviours are an implementation of the <a href="http://en.wikipedia.org/wiki/Decorator_pattern" target="_blank" rel="noopener">decorator pattern</a> which allows you to separate behaviours or concerns into a discrete class and attach to the visual element.</p><p>So what if we treated the ViewModel as just a specialized storage for the View, like a ViewBag in ASP.net MVC, and put all the behaviours of the ViewModel into an attachment that we expose through the ViewModel via public properties?</p><p>What if our ViewModel was just a bunch of public properties?</p><p>What if we used some sort of attachment to add behaviour to that ViewModel?</p><h2 id="Attachments-to-ViewModels"><a href="#Attachments-to-ViewModels" class="headerlink" title="Attachments to ViewModels"></a>Attachments to ViewModels</h2><p>A ViewModel can have multiple attachments, each fulfilling a specific purpose. An attachment can set up initial values for properties, and assign ICommands for the ViewModel.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">IAttachment</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">AttachTo</span><span class="token punctuation">(</span><span class="token keyword">object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Attachment</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> IAttachment <span class="token punctuation">{</span>    <span class="token keyword">protected</span> T viewModel<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">OnAttach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> IAttachment<span class="token punctuation">.</span><span class="token function">AttachTo</span><span class="token punctuation">(</span><span class="token keyword">object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        viewModel <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>        <span class="token function">OnAttach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SampleAttachment</span> <span class="token punctuation">:</span> Attachment<span class="token operator">&lt;</span>SampleViewModel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnAttach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ... set up properties in the view model</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SampleViewModel</span> <span class="token punctuation">:</span> ViewModelBase <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> SomeProperty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    pubic ICommand DoSomething <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Setting up an attachment is pretty straightforward. You can simply call the attachment from the constructor of the ViewModel itself. A better option however is to use your IoC to automate the attachment process. Here’s an example of how to do this in Autofac.</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">AutoAttachmentModule</span> <span class="token punctuation">:</span> Module <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">AttachToComponentRegistration</span><span class="token punctuation">(</span>        IComponentRegistry componentRegistry<span class="token punctuation">,</span>         IComponentRegistration registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registration<span class="token punctuation">.</span>Activating <span class="token operator">+</span><span class="token operator">=</span> Activating<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Activating</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> ActivatingEventArgs<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> vmType <span class="token operator">=</span> e<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Convention to find attachments from a ViewModel</span>        <span class="token comment" spellcheck="true">// This can be done better.</span>        <span class="token keyword">var</span> attachmentType <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>            vmType<span class="token punctuation">.</span>FullName<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span><span class="token string">"ViewModel"</span><span class="token punctuation">,</span> <span class="token string">"Attachment"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attachmentType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>             <span class="token operator">!</span>e<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">IsRegistered</span><span class="token punctuation">(</span>attachmentType<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> attachment <span class="token operator">=</span> <span class="token punctuation">(</span>IAttachment<span class="token punctuation">)</span>e<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>attachmentType<span class="token punctuation">)</span><span class="token punctuation">;</span>        attachment<span class="token punctuation">.</span><span class="token function">AttachTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Attachments allows for the separation of parts of of a ViewModel that cannot otherwise be broken up with sub-ViewModels.</p><p>We can test the View-ViewModel binding without worrying about triggering an interaction in the ViewModel’s implementation.</p><p>We can also test the ViewModel-Attachment interaction without worrying about whether our bindings are correct. And with each logical part being in a separate Attachment we can test them in isolation without side-effect.</p>]]></content:encoded>
      
      <comments>http://cam.macfar.land/attachments/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Existing MVVM Frameworks</title>
      <link>http://cam.macfar.land/existing-mvvm-frameworks/</link>
      <guid>http://cam.macfar.land/existing-mvvm-frameworks/</guid>
      <pubDate>Sun, 12 Aug 2012 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;This post is part of a series about desktop application development in WPF using MVVM.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>This post is part of a series about desktop application development in WPF using MVVM.</p><a id="more"></a><p>Currently there are at least <a href="http://www.japf.fr/silverlight/mvvm/" target="_blank" rel="noopener">19 MVVM frameworks</a> out there as well as any number of privately rolled frameworks for doing MVVM style development. But what makes them MVVM frameworks?</p><p>Most frameworks implement some sort of base class or helper for implementing <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx" target="_blank" rel="noopener"><code>INotifyPropertyChanged</code></a> and some sort of <a href="http://msdn.microsoft.com/en-us/library/system.windows.input.icommand.aspx" target="_blank" rel="noopener"><code>ICommand</code></a> implementation which usually just takes some code as a delegate and uses that as the commands body.</p><p>By far one of the most popular frameworks is <a href="http://caliburnmicro.codeplex.com/" target="_blank" rel="noopener">Caliburn.Micro</a>. It’s very easy to use, has good documentation and allows new projects to get going quickly. However it, like the other frameworks, doesn’t address the issues I stated in the previous post. So once you’ve used Caliburm.Micro for anything other than a basic project with a handful of screens you start to see large ViewModels, and lots of hand cranked <code>INotifyPropertyChanged</code> code again.</p><p>Some <a href="http://brendanforster.com/inotifypropertychanged-stop-the-madness.html" target="_blank" rel="noopener">people</a> argue that you shouldn’t be writing any code to deal with <code>INotifyPropertyChanged</code>. And they are right. But the problem with MVVM frameworks is they try to help you, and so their documentation ends up saying to implement a <code>ViewModel</code> do this…</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">string</span> someProperty<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">string</span> SomeProperty<span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> someProperty<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">set</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>someProperty <span class="token operator">!=</span> <span class="token keyword">value</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        someProperty <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>        MyFramework<span class="token punctuation">.</span><span class="token function">SomeHelper</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>SomeProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Blergh!</p><p>Once you’ve learned to do this it keeps being done and people repeat the mistake. Instead there are tools like <a href="https://github.com/SimonCropp/NotifyPropertyWeaver" target="_blank" rel="noopener">NotifyPropertyWeaver</a> which can automate this sort of hand cranked donkey code for you.</p><p>And this is where I think the idea of an MVVM <em>framework</em> falls down. Instead what we should have is a technology stack that provides solutions to all the issues involved in making a non-trivial MVVM application.</p><p>So what is in my stack at the moment?</p><p><a href="http://caliburnmicro.codeplex.com/" target="_blank" rel="noopener">Caliburn.Micro</a> - Used for View/ViewModel management only. I like how Caliburn.Micro is ViewModel driven, and controls the lifetime of a ViewModel, as well as providing a guard for closing a ViewModel so you can ask the user if they would like to save before closing, for example.</p><p><a href="http://www.reactiveui.net/" target="_blank" rel="noopener">ReactiveUI</a> - I’ve come around to the whole reactive paradigm, especially when it’s applied to ViewModels that have a PropertyChanged event. ReactiveUI allows me to watch a collection of ViewModels for any changes, and execute some code based on that. Another use is as a stream of progress events, and the UI subscribes to a sampling of that stream and displays the progress.</p><p><a href="http://code.google.com/p/autofac/" target="_blank" rel="noopener">Autofac</a> - My <a href="http://en.wikipedia.org/wiki/Inversion_of_control" target="_blank" rel="noopener">IoC</a> of choice, but really you could use any here, with the possible exception of <a href="http://unity.codeplex.com/" target="_blank" rel="noopener">Unity</a>. If you must use Microsoft use <a href="http://mef.codeplex.com/" target="_blank" rel="noopener">MEF</a>. And as <a href="http://twitter.com/Kiwipom" target="_blank" rel="noopener">Ian</a> says, IoC a Nike technology, Just do it!</p><p><a href="https://github.com/SimonCropp/PropertyChanged" target="_blank" rel="noopener">PropertyChanged.Fody</a> and <a href="https://github.com/SimonCropp/PropertyChanging" target="_blank" rel="noopener">PropertyChanging.Fody</a> (with <a href="http://visualstudiogallery.msdn.microsoft.com/074a2a26-d034-46f1-8fe1-0da97265eb7a" target="_blank" rel="noopener">Fody</a>) - Fody is Simon Cropp’s project for generic post compile code injection, or <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming" target="_blank" rel="noopener">Aspect oriented Programming</a>. PropertyChanged.Fody is the <a href="http://simoncropp.com/fodyandnotifypropertyweaver" target="_blank" rel="noopener">successor</a> to NotifyPropertyWeaver and so I tend to use it on newer projects. If you’re already on NotifyPropertyWeaver give yourself a gold star, but don’t worry about swapping if it does what you need.</p><p><a href="http://automapper.org/" target="_blank" rel="noopener">Automapper</a> - Automapper is designed to take all the dull work of mapping two objects with the same properties to each other. This is brilliant for mapping say a Model (or DTO) to a ViewModel instead of being lazy and just shoving the Model towards the View and letting it fend for itself.</p><p>Is that all? Well no, there are other systems I use to make my life easier as a developer. Now that I’ve got the main subsystems that people know about out the way I’ll talk about some other tools to help even more in my next post.</p>]]></content:encoded>
      
      <comments>http://cam.macfar.land/existing-mvvm-frameworks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>The State of MVVM</title>
      <link>http://cam.macfar.land/the-state-of-mvvm/</link>
      <guid>http://cam.macfar.land/the-state-of-mvvm/</guid>
      <pubDate>Mon, 06 Aug 2012 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Ok, so I’ve been meaning to (procrastinating actually) write a blog entry for a while now.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Ok, so I’ve been meaning to (procrastinating actually) write a blog entry for a while now.</p><a id="more"></a><p>Over the past year or so I’ve been struggling to come up with a simple, easy, repeatable way to develop applications for WPF. And while the <a href="http://en.wikipedia.org/wiki/Model_View_ViewModel" target="_blank" rel="noopener"><strong>M</strong>odel-<strong>V</strong>iew-<strong>V</strong>iew<strong>M</strong>odel</a> (<strong>MVVM</strong>) pattern gets us a long way there it’s not without issues.</p><p>Other people have tried addressing the shortcomings of WPF by going for a <a href="http://en.wikipedia.org/wiki/Model-view-controller" target="_blank" rel="noopener"><strong>M</strong>odel-<strong>V</strong>iew-<strong>C</strong>ontroller</a> (<strong>MVC</strong>) pattern, but this implies a navigation style user experience, which isn’t always the case. Take multi-document interfaces for example, where there may be multiple <code>Views</code> open, all of which are active (documents, tool windows, etc.).</p><p>So instead I decided to tackle the issues as I saw them with using the MVVM pattern. The most major issues I had were:</p><ul><li><p><em>Mega-ViewModels</em> - <code>ViewModels</code> that because they do so much, require massive amounts of services and a massive amount of code, effectively making them <a href="http://en.wikipedia.org/wiki/God_object" target="_blank" rel="noopener">God objects</a>. This also breaks the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">Single Responsibility Principle</a>.</p></li><li><p><em>UI Models</em> - This is the term I use to describe a <code>Model</code> that has been presented directly to the <code>View</code> either through the <code>ViewModel</code> or not. An easy way to spot these objects is they are a <code>Model</code>, but they implement <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx" target="_blank" rel="noopener"><code>INotifyPropertyChanged</code></a> or some other UI behaviour or code. For small projects you can get away with this but as the projects goes the issues from this get worse leading to more pain.</p></li><li><p><em>Code Grinding</em> - Writing the same code over and over to implement some architectural pattern isn’t fun. For MVVM the standard grind is implementing <code>INotifyPropertyChanged</code>. And while most MVVM frameworks have a base implementation that you can use to simplify the implementation they still require you to write some sort of code in every property setter, plus if you have other properties dependant on that property they must also call the changed event.</p></li></ul><p>Over the next few blog posts I hope to demonstrate a set of tools and utilities that will help with these issues, and generally make it easier to develop desktop applications using the MVVM pattern. So far I’ve only applied the solution to WPF applications but I don’t see why it couldn’t also work in Silverlight or WinRT when the MVVM pattern is implemented.</p>]]></content:encoded>
      
      <comments>http://cam.macfar.land/the-state-of-mvvm/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
